// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Anime {
  id            Int          @id // animetheme api's anime id
  anilistId     Int?
  myanimelistId Int?
  kitsuId       Int?
  anidbId       Int?
  title         String
  animeThemes   AnimeTheme[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  apSongs       APSong[]

  @@index([anilistId, myanimelistId, kitsuId, anidbId, createdAt, updatedAt])
}

model AnimeTheme {
  id        Int                @id // animetheme api's song id
  title     String
  slug      String
  artists   AnimeThemeArtist[]
  animeId   Int
  anime     Anime              @relation(fields: [animeId], references: [id])
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  @@index([createdAt, updatedAt])
}

model AnimeThemeArtist {
  id          Int          @id
  name        String
  animeThemes AnimeTheme[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model APSong {
  id            Int            @id @default(autoincrement())
  type          String
  title         String
  animeTitle    String
  anime         Anime[]
  appleMusicUrl AppleMusicUrl?
  spotifyTrack  SpotifyTrack?
  spotifyAlbum  SpotifyAlbum?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@unique([type, animeTitle], name: "aniplaylistIdentifier")
}

model AppleMusicUrl {
  id        Int      @id @default(autoincrement())
  url       String
  apSongId  Int      @unique
  apSong    APSong   @relation(fields: [apSongId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SpotifyTrack {
  id               String          @id @db.VarChar(25) // uri
  name             String
  previewUrl       String?
  image            String
  durationMs       Int
  isrc             String?
  artists          SpotifyArtist[]
  albums           SpotifyAlbum[]
  availableMarkets CountryCode[]
  // addedTimes       Int               @default(0)
  apSongId         Int             @unique
  apSong           APSong          @relation(fields: [apSongId], references: [id])
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model SpotifyAlbum {
  id        String          @id @db.VarChar(25) // uri
  name      String
  artists   SpotifyArtist[]
  tracks    SpotifyTrack[]
  apSongId  Int             @unique
  apSong    APSong          @relation(fields: [apSongId], references: [id])
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model SpotifyArtist {
  id        String         @id // spotify uri
  name      String
  tracks    SpotifyTrack[]
  albums    SpotifyAlbum[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model CountryCode {
  code          String         @id @db.VarChar(3) // JP, US, UK などcountry codeをidとする
  spotifyTracks SpotifyTrack[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}
