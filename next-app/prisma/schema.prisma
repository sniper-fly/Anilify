// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Media {
  id             Int             @id @default(autoincrement())
  anilistId      Int
  myanimelistId  Int
  title          String
  songs          Song[]
  streamingSongs StreamingSong[]
}

model Song {
  id            Int             @id @default(autoincrement())
  title         String
  jpTitle       String?
  slug          String?
  artists       SongArtists[]
  mediaId       Int
  streamingSong StreamingSong[]

  media Media @relation(fields: [mediaId], references: [id])
}

model StreamingSong {
  id       Int    @id @default(autoincrement())
  provider String

  uri        String
  name       String
  artists    StreamingArtists[]
  openLink   String
  previewUrl String
  image      String
  durationMs Int

  songType   String
  addedCount Int

  songId  Int?
  mediaId Int

  Media            Media             @relation(fields: [mediaId], references: [id])
  Song             Song?             @relation(fields: [songId], references: [id])
  AvailableMarkets AvailableMarket[]

  @@unique([provider, uri]) // Composite unique constraint
}

model SongArtists {
  id     Int    @id @default(autoincrement())
  name   String
  songId Int
  song   Song   @relation(fields: [songId], references: [id])
}

model StreamingArtists {
  id          Int           @id @default(autoincrement())
  name        String
  streamingId Int
  song        StreamingSong @relation(fields: [streamingId], references: [id])
}

model AvailableMarket {
  id          Int           @id @default(autoincrement())
  name        String
  streamingId Int
  song        StreamingSong @relation(fields: [streamingId], references: [id])
}
