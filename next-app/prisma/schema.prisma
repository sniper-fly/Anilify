// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Anime {
  id             Int             @id @unique // animetheme api's anime id
  anilistId      Int?
  myanimelistId  Int?
  kitsuId        Int?
  anidbId        Int?
  title          String
  animeThemes    AnimeTheme[]
  streamingSongs StreamingSong[]
}

model AnimeTheme {
  id            Int                 @id @unique // animetheme api's song id
  title         String
  slug          String
  artists       AnimeThemeArtists[]
  animeId       Int
  streamingSong StreamingSong[]

  anime Anime @relation(fields: [animeId], references: [id])
}

model StreamingSong {
  id       Int    @id @default(autoincrement())
  provider String

  uri        String
  name       String
  artists    StreamingArtists[]
  openLink   String
  previewUrl String
  image      String
  durationMs Int

  songType   String
  addedCount Int

  animeThemeId Int?
  animeId      Int

  anime            Anime             @relation(fields: [animeId], references: [id])
  animeTheme       AnimeTheme?       @relation(fields: [animeThemeId], references: [id])
  availableMarkets AvailableMarket[]

  @@unique([provider, uri]) // Composite unique constraint
}

model AnimeThemeArtists {
  name         String
  animeThemeId Int        @id
  animeTheme   AnimeTheme @relation(fields: [animeThemeId], references: [id])
}

model StreamingArtists {
  name          String
  streamingId   Int           @id
  streamingSong StreamingSong @relation(fields: [streamingId], references: [id])
}

model AvailableMarket {
  name          String
  streamingId   Int           @id
  streamingSong StreamingSong @relation(fields: [streamingId], references: [id])
}
